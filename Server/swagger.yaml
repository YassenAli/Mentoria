openapi: 3.0.0
info:
  title: Course Management API
  description: API documentation for the Course Management System
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Development server
tags:
  - name: Courses
    description: Operations related to courses
  - name: Users
    description: Operations related to users
paths:
  /api/courses:
    get:
      tags:
        - Courses
      summary: Get all courses with filters
      description: Retrieve a paginated list of courses with optional filters for category, difficulty, title or instructor
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category (e.g., 'Web Development')
        - in: query
          name: difficulty
          schema:
            type: string
            enum: ['beginner', 'intermediate', 'advanced']
          description: Filter by difficulty level
        - in: query
          name: instructor
          schema:
            type: string
          description: Filter by instructor's ID
      responses:
        '200':
          description: A list of filtered courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  totalAmount:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
    post:
      tags:
        - Courses
      summary: Create a course
      description: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
  /api/courses/{id}:
    get:
      tags:
        - Courses
      summary: Get a course by ID
      description: Retrieve a course by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the course to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    put:
      tags:
        - Courses
      summary: Update a course
      description: Update a course by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the course to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Course updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
    delete:
      tags:
        - Courses
      summary: Delete a course
      description: Delete a course by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the course to delete
          schema:
            type: string
      responses:
        '204':
          description: Course deleted
  /api/courses/{id}/enroll:
    post:
      tags:
        - Courses
      summary: Enroll a student in a course
      description: Enroll a student in a course by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the course to enroll in
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentId:
                  type: integer
      responses:
        '201':
          description: Student enrolled
          content:
            application/json:
              schema:
                type: object
                properties:
                  studentId:
                    type: integer
                  courseId:
                    type: integer
                  enrolledAt:
                    type: string
  /api/courses/{id}/reviews:
    post:
      tags:
        - Courses
      summary: Create a review for a course
      description: Create a review for a course by its ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the course to create a review for
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                comment:
                  type: string
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  rating:
                    type: integer
                  comment:
                    type: string
                  createdAt:
                    type: string
  /api/users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/login:
    post:
      tags:
        - Users
      summary: Login a user
      description: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/facebook-login:
    post:
      tags:
        - Users
      summary: Login a user with Facebook
      description: Login a user with Facebook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/google-login:
    post:
      tags:
        - Users
      summary: Login a user with Google
      description: Login a user with Google
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tokenId:
                  type: string
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/refresh-token:
    post:
      tags:
        - Users
      summary: Refresh a user's token
      description: Refresh a user's token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: User not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Refresh Token is required!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    /api/users/{id}/courses:
      get:
        tags:
          - Users
        summary: Get all courses for a user
        description: Retrieve all courses and enrollments for a user by his ID
        parameters:
          - in: path
            name: id
            required: true
            description: ID of the user to retrieve courses and enrollments for
            schema:
              type: string
        responses:
          '200':
            description: A list of courses & enrollments
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    courses:
                      type: array
                      items:
                        $ref: '#/components/schemas/Course'
                    enrolledCourses:
                      type: array
                      items:
                        $ref: '#/components/schemas/Course'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
components:
  schemas:
    Course:
      type: object
      properties:
        title:
          type: string
          required: true
        description:
          type: string
          required: true
        instructor:
          type: string
        students:
          type: array
          items:
            type: string
        category:
          type: string
          enum: ['Web Development', 'Mobile Development', 'Data Science', 'Machine Learning', 'Artificial Intelligence', 'Blockchain', 'Cybersecurity', 'Cloud Computing', 'DevOps', 'Other']
          required: true
        difficulty:
          type: string
          enum: ['beginner', 'intermediate', 'advanced']
          required: true
        materials:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              url:
                type: string
                format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - description
        - category
        - difficulty
    Enrollment:
      type: object
      properties:
        studentId:
          type: string
        courseId:
          type: string
        enrolledAt:
          type: string
          format: date-time
        progress:
          type: integer
          minimum: 0
          maximum: 100
        grade:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 100
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
          required: true
        password:
          type: string
          required: true
        role:
          type: string
          enum: ['instructor', 'student']
          default: 'student'
        googleId:
          type: string
        facebookId:
          type: string
      required:
        - name
        - email
        - password
    Error:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer